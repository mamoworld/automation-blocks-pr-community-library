<xml xmlns="https://developers.google.com/blockly/xml"><block type="mm_multiline_comment_block" id="U]?l/LM3^c)a%@mBy;N7" x="170" y="22"><field name="TEXT">sorts a spreadsheet based on a given column&amp;#10;and writes the result into  a new spreadsheet file.&amp;#10;&amp;#10;spreadsheetIn: the original spreadsheet file&amp;#10;spreadsheetOut: where the sorted spreadsheet file should be saved&amp;#10;column: (0-based! 0=first, 1 = second column,...)&amp;#10;fps: only  needed if the column which should  be sorted contains timecode.</field></block><block type="es_tutorial" id="lF/p$zw@{S_G/l#25w`t" x="170" y="295"><field name="WATCH_TUT_LABEL">open web page</field><field name="TITLE">see this forum discussion</field><field name="URL">https://community.adobe.com/t5/premiere-pro-discussions/automation-blocks-adding-row-numbers-and-sorting-by-column-in-csv-export/m-p/15403756#M565624</field></block><block type="pr_execute_code" id="ATtudg;Ux^*@,uqf9H}3" x="178" y="511"><mutation items="0" resultType="none"></mutation><field name="RESULT_TYPE">none</field><value name="CODE"><shadow type="text_multiline" id="|m8vu#rF@p9sO134(eCu"><field name="TEXT">// force writing all still open files&amp;#10;// to disk before we continue&amp;#10;$._extAutomationBlocks.all.fileCollection.cleanup()</field></shadow></value><next><block type="pr_execute_code" id="^dI~bR`{Px8Br1b:9ws$"><mutation items="4" resultType="none"></mutation><field name="FIELD_VAR_NAME_0">spreadsheetIn</field><field name="FIELD_VAR_TYPE_0">other</field><field name="FIELD_VAR_NAME_1">spreadsheetOut</field><field name="FIELD_VAR_TYPE_1">other</field><field name="FIELD_VAR_NAME_2">column</field><field name="FIELD_VAR_TYPE_2">other</field><field name="FIELD_VAR_NAME_3">fps</field><field name="FIELD_VAR_TYPE_3">other</field><field name="RESULT_TYPE">none</field><value name="ADD0"><shadow type="text" id="/T5m7d*re.(mrm0ZkQF-"><field name="TEXT">variable value</field></shadow><block type="block_extendscript_file" id="ok9NdB#S+,lzt?_;lyfs"><field name="FILE_PATH">~/Desktop/in.csv</field></block></value><value name="ADD1"><block type="block_extendscript_file" id="_(6o*{/W-TzokQB.2m_#"><field name="FILE_PATH">~/Desktop/out.csv</field></block></value><value name="ADD2"><block type="math_number" id="/NO{[?@{%?qNqAd:7/*b"><field name="NUM">2</field></block></value><value name="ADD3"><block type="math_number" id="6bIx`Lc[?8c)Fsh[of|w"><field name="NUM">30</field></block></value><value name="CODE"><shadow type="text_multiline" id="bsH-0mv|f].Yu!0dg@A4"><field name="TEXT">/**&amp;#10; * Sorts a CSV file by a given column and writes the result to a new file.&amp;#10; * Supports robust sorting of timecodes in "HH:MM:SS:FF" format.&amp;#10; *&amp;#10; * @param {String} spreadsheetIn   – path to the input CSV&amp;#10; * @param {String} spreadsheetOut  – path to write the sorted CSV&amp;#10; * @param {Number} column         – zero-based index of the column to sort by&amp;#10; * @param {Number} [fps=30]        – frames per second for timecode conversion&amp;#10; */&amp;#10;function sortCsvByColumn(spreadsheetIn, spreadsheetOut, column, fps) {&amp;#10;    fps = fps || 30;&amp;#10;&amp;#10;    // Helpers&amp;#10;    function isTimecode(s) {&amp;#10;        return /^\d{1,2}:\d{1,2}:\d{1,2}:\d{1,2}$/.test(s);&amp;#10;    }&amp;#10;    function timecodeToFrames(tc) {&amp;#10;        var parts = tc.split(":").map(function(x){ return parseInt(x,10); });&amp;#10;        // pad single-digit hours/min/sec as needed&amp;#10;        var h = parts[0], m = parts[1], s = parts[2], f = parts[3];&amp;#10;        return ((h*3600 + m*60 + s) * fps) + f;&amp;#10;    }&amp;#10;&amp;#10;    // Open &amp; read input&amp;#10;    var inFile = new File(spreadsheetIn);&amp;#10;    if (!inFile.exists || !inFile.open("r"))&amp;#10;        throw new Error("Cannot open input: " + spreadsheetIn);&amp;#10;    inFile.encoding = "UTF-8";&amp;#10;    var lines = inFile.read().split(/\r?\n/);&amp;#10;    inFile.close();&amp;#10;    if (!lines.length || lines[lines.length-1] === "") lines.pop();&amp;#10;&amp;#10;    // Separate header&amp;#10;    var header = lines.shift();&amp;#10;    var data = lines.map(function(line){ return line.split(","); });&amp;#10;&amp;#10;    // Sort rows&amp;#10;    data.sort(function(a, b) {&amp;#10;        var A = a[column], B = b[column];&amp;#10;&amp;#10;        // 1) Both look like timecodes? → compare total frames&amp;#10;        if (isTimecode(A) &amp;&amp; isTimecode(B)) {&amp;#10;            return timecodeToFrames(A) - timecodeToFrames(B);&amp;#10;        }&amp;#10;&amp;#10;        // 2) Both numeric? → numeric compare&amp;#10;        var aNum = parseFloat(A), bNum = parseFloat(B);&amp;#10;        if (!isNaN(aNum) &amp;&amp; !isNaN(bNum)) {&amp;#10;            return aNum - bNum;&amp;#10;        }&amp;#10;&amp;#10;        // 3) Fallback → string compare&amp;#10;        return A.localeCompare(B);&amp;#10;    });&amp;#10;&amp;#10;    // Reconstruct CSV text&amp;#10;    var outText = [ header ]&amp;#10;        .concat(data.map(function(fields){ return fields.join(","); }))&amp;#10;        .join("\r\n");&amp;#10;&amp;#10;    // Write output&amp;#10;    var outFile = new File(spreadsheetOut);&amp;#10;    if (!outFile.open("w"))&amp;#10;        throw new Error("Cannot open output: " + spreadsheetOut);&amp;#10;    outFile.encoding = "UTF-8";&amp;#10;    outFile.lineFeed = "Windows";&amp;#10;    outFile.write(outText);&amp;#10;    outFile.close();&amp;#10;}&amp;#10;&amp;#10;sortCsvByColumn(spreadsheetIn, spreadsheetOut, column, fps)&amp;#10;</field></shadow></value></block></next></block></xml>